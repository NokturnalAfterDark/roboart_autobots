# from tkinter import Tk, Canvas, PhotoImage
# import math
# import os
# import nltk

# class Robot:
#     def __init__(self, canvas, x, y, size=20):
#         self.canvas = canvas
#         self.size = size
#         self.points = []
#         self.robot_id = None
#         self.current_point_index = 0
#         self.move_speed = 2
#         self.width = 1

#         self.robot_id = canvas.create_rectangle(x - size, y - size, x + size, y + size, fill="blue")

#         print("Robot initialized!")
#         #THIS CODE NEEDS TO BE DECOUPLED FROM THE ROBOT WHEN MERGING, TESTING ONLY

#     def move(self, dx, dy):
#         self.canvas.move(self.robot_id, dx, dy)

#     def get_position(self):
#         coords = self.canvas.coords(self.robot_id)
#         x = (coords[0] + coords[2]) / 2
#         y = (coords[1] + coords[3]) / 2
#         return x, y

#     def draw(self, command):
#         words = nltk.word_tokenize(command.lower())
#         if words[0] == 'draw' and words[1] in ['circle', 'rectangle', 'triangle']:
#             shape_command = words[1]
#             parameters = [word for word in words[2:] if word.isdigit()]
#             if parameters:
#                 parameters = list(map(int, parameters))
#                 self.draw_shape(shape_command, *parameters)
#             else:
#                 print("Invalid parameters for drawing.")

#     def draw_shape(self, shape_command, *args):
#         x, y = self.get_position()

#         if shape_command == 'circle' and len(args) == 1:
#             radius = args[0]
#             self.canvas.create_oval(x - radius, y - radius, x + radius, y + radius, outline='black')

#         elif shape_command == 'rectangle' and len(args) == 2:
#             width, height = args
#             self.canvas.create_rectangle(x - width / 2, y - height / 2, x + width / 2, y + height / 2, outline='black')

#         elif shape_command == 'triangle' and len(args) == 1:
#             side_length = args[0]
#             height = (3 ** 0.5 / 2) * side_length
#             points = [
#                 x, y - height / 2,
#                 x - side_length / 2, y + height / 2,
#                 x + side_length / 2, y + height / 2
#             ]
#             self.canvas.create_polygon(points, outline='black')

#         else:
#             print("Invalid shape or parameters.")

#     def follow_path(self):
#         if self.current_point_index < len(self.points) - 1:
#             current_x, current_y = self.get_position()
#             #self.canvas.create_line(current_x - 5, current_y - 5, current_x + 5, current_y + 5, fill="red", width=2)
#             target_x, target_y = self.points[self.current_point_index + 1]
#             self.canvas.create_line(target_x - 5, target_y - 5, target_x + 5, target_y + 5, fill="red", width=self.width)

#             # Calculate the distance between current and target points
#             distance = math.sqrt((target_x - current_x)**2 + (target_y - current_y)**2)

#             # Adjust the move_speed based on the distance
#             self.move_speed = max(1, min(10, distance / 100))

#             # Calculate the movement vector
#             dx = (target_x - current_x) / self.move_speed
#             dy = (target_y - current_y) / self.move_speed

#             # Move the robot
#             self.move(dx, dy)

#             # Check if the robot has reached the target point
#             if abs(current_x - target_x) < 1 and abs(current_y - target_y) < 1:
#                 self.current_point_index += 1

#             # Schedule the next movement
#             self.canvas.after(10, self.follow_path)

# if __name__ == "__main__":
#     root = Tk()
#     canvas = Canvas(root, width=400, height=400)
#     canvas.pack()

#     robot = Robot(canvas, x=200, y=200)

#     # Example NLTK command
#     robot.draw("draw circle 50")

#     root.mainloop()